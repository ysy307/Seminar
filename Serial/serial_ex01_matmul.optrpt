Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.10.0 Build 20230609_000000

Compiler options: /o:C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.exe /O3 /QxHost /Qopt-report:5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -Qinline-factor: 100
  -Qinline-min-size: 30
  -Qinline-max-size: 230
  -Qinline-max-total-size: 2000
  -Qinline-max-per-routine: 10000
  -Qinline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.


Begin optimization report for: MATRIX_MULTIPLICATION

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MATRIX_MULTIPLICATION) [1/1=100.0%] C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(1,9)
  -> EXTERN: (1,9) for_set_reentrancy
  -> EXTERN: (12,17) sin
  -> EXTERN: (13,17) sin
  -> EXTERN: (14,17) cos
  -> EXTERN: (15,17) cos
  -> EXTERN: (20,8) for_cpusec_t
  -> EXTERN: (24,8) for_cpusec_t
  -> EXTERN: (27,3) for_write_seq_lis_xmit
  -> EXTERN: (27,3) for_write_seq_lis_xmit
  -> EXTERN: (27,3) for_write_seq_lis


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(10,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(11,5)
      remark #25427: Loop Statements Reordered
      remark #15388: vectorization support: reference C(I,J) has aligned access   [ C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(16,7) ]
      remark #15388: vectorization support: reference B(I,J) has aligned access   [ C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(14,7) ]
      remark #15388: vectorization support: reference A(I,J) has aligned access   [ C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(12,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.013
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 445 
      remark #15477: vector cost: 78.000 
      remark #15478: estimated potential speedup: 5.700 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=256
   LOOP END
LOOP END

LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
   remark #25420: Collapsed with loop at line 22 
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 2 1 3 )
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
            remark #25442: blocked by 128   (pre-vector) 
            remark #25440: unrolled and jammed by 4   (pre-vector) 
            remark #15542: loop was not vectorized: inner loop was already vectorized
            remark #25015: Estimate of max trip count of loop=128

            LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
               remark #25442: blocked by 128   (pre-vector) 
               remark #25440: unrolled and jammed by 4   (pre-vector) 
               remark #15542: loop was not vectorized: inner loop was already vectorized
               remark #25015: Estimate of max trip count of loop=128

               LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
                  remark #25442: blocked by 128   (pre-vector) 
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.143
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 20 
                  remark #15449: unmasked aligned unit stride stores: 16 
                  remark #15475: --- begin vector cost summary ---
                  remark #15476: scalar cost: 133 
                  remark #15477: vector cost: 28.000 
                  remark #15478: estimated potential speedup: 4.650 
                  remark #15488: --- end vector cost summary ---
                  remark #25456: Number of Array Refs Scalar Replaced In Loop: 36
                  remark #25015: Estimate of max trip count of loop=32
               LOOP END
            LOOP END

            LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
            <Remainder>
               remark #15542: loop was not vectorized: inner loop was already vectorized
               remark #25015: Estimate of max trip count of loop=128

               LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.143
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 8 
                  remark #15449: unmasked aligned unit stride stores: 4 
                  remark #15475: --- begin vector cost summary ---
                  remark #15476: scalar cost: 33 
                  remark #15477: vector cost: 7.000 
                  remark #15478: estimated potential speedup: 4.620 
                  remark #15488: --- end vector cost summary ---
                  remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
                  remark #25015: Estimate of max trip count of loop=32
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
         <Remainder>
            remark #15542: loop was not vectorized: inner loop was already vectorized
            remark #25015: Estimate of max trip count of loop=128

            LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
               remark #15542: loop was not vectorized: inner loop was already vectorized
               remark #25015: Estimate of max trip count of loop=128

               LOOP BEGIN at C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7)
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference C(:,:) has aligned access
                  remark #15388: vectorization support: reference A(:,:) has aligned access
                  remark #15305: vectorization support: vector length 4
                  remark #15309: vectorization support: normalized vectorization overhead 0.143
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15448: unmasked aligned unit stride loads: 2 
                  remark #15449: unmasked aligned unit stride stores: 1 
                  remark #15475: --- begin vector cost summary ---
                  remark #15476: scalar cost: 8 
                  remark #15477: vector cost: 1.750 
                  remark #15478: estimated potential speedup: 4.480 
                  remark #15488: --- end vector cost summary ---
                  remark #25015: Estimate of max trip count of loop=32
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(22,7):remark #34026: call to memset implemented as a call to optimized library version
C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90(1,9):remark #34051: REGISTER ALLOCATION : [MAIN__] C:\Users\runat\HPC_Semi\Serial\serial_ex01_matmul.f90:1

    Hardware registers
        Reserved     :    3[ rsp r13 rip]
        Available    :   38[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :   17[ rbx rbp rsi rdi r12 r14-r15 xmm6-xmm15]
        Assigned     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r12 r14-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     224
            Global    :     107
            Local     :     117
        Regenerable   :      44
        Spilled       :      36
        
    Routine stack
        Variables     :     315 bytes*
            Reads     :       5 [7.38e-09 ~ 0.0%]
            Writes    :      10 [1.48e-08 ~ 0.0%]
        Spills        :     448 bytes*
            Reads     :      54 [7.93e+00 ~ 7.9%]
            Writes    :      50 [1.24e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
